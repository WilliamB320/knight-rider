#include <Wire.h>
#include <OPT3101.h>
#include <ESP32Servo.h>

#define SERVO_PIN 9  
#define MOTOR_IN1 A1  
#define MOTOR_IN2 A2  
#define MOTOR_SPEED 8  

Servo myservo;
OPT3101 sensor;

int servoStraight = 90;  
int servoLeft = 135;   // 🔥 MER AGGRESSIV STYRNING
int servoRight = 45;   // 🔥 MER AGGRESSIV STYRNING
int servoPosition = 90;  

int lastDistance0 = 600;  
int lastDistance1 = 600;  
int lastDistance2 = 600;  

unsigned long lastPreprekaTime = 0;
const int stabilizacijaVremena = 100;  // 🔥 Snabbare servo-reaktion
const int hinderMin = 100;  
const int hinderMax = 400;  // 🔥 Ökar maxavståndet för bättre banföljning

int motorSpeed = 5;  // ✅ Mycket låg hastighet
bool motorOn = true;
unsigned long lastMotorToggle = 0;
const int motorInterval = 300;  

void setup() {
  Serial.begin(115200);
  delay(1000);

  Serial.println("🔄 Startar...");
  Wire.begin(A4, A5);

  sensor.init();
  if (sensor.getLastError()) {
    Serial.print("❌ Sensorfel: ");
    Serial.println(sensor.getLastError());
    while (1);
  }

  sensor.configureDefault();
  sensor.setFrameTiming(32);
  sensor.setBrightness(OPT3101Brightness::High);
  sensor.enableTimingGenerator();

  myservo.attach(SERVO_PIN);
  myservo.write(servoStraight);

  pinMode(MOTOR_IN1, OUTPUT);
  pinMode(MOTOR_IN2, OUTPUT);
  pinMode(MOTOR_SPEED, OUTPUT);
  
  digitalWrite(MOTOR_IN1, HIGH);
  digitalWrite(MOTOR_IN2, LOW);
  analogWrite(MOTOR_SPEED, motorSpeed);  

  Serial.println("✅ System klart!");
  sensor.setChannel(0);
  sensor.startSample();
}

void loop() {
  unsigned long currentTime = millis();

  if (sensor.isSampleDone()) {
    sensor.readOutputRegs();
    int16_t distance = sensor.distanceMillimeters;
    int currentChannel = sensor.channelUsed;

    Serial.print("📡 Kanal: ");
    Serial.print(currentChannel);
    Serial.print(" | Avstojanje: ");
    Serial.print(distance);
    Serial.println(" mm");

    if (distance == 0) {
      Serial.println("⚠️ Ogiltigt värde - ignorerar!");
      sensor.startSample();
      delay(200);
      return;
    }

    // ✅ Om inga hinder, servo snabbt tillbaka till mitten
    if (lastDistance0 > hinderMax && lastDistance1 > hinderMax && lastDistance2 > hinderMax) {  
      if (servoPosition != servoStraight) {
        Serial.println("🔄 Inga hinder, snabb tillbaka till mitten.");
        servoPosition = servoStraight;
        myservo.write(servoPosition);
      }

      // ✅ Motor går långsamt i pulser
      if (currentTime - lastMotorToggle > motorInterval) {
        motorOn = !motorOn;  
        if (motorOn) {
          analogWrite(MOTOR_SPEED, motorSpeed);
        } else {
          analogWrite(MOTOR_SPEED, 0);
        }
        lastMotorToggle = currentTime;
      }
    }

    // ✅ Om hinder till höger (100–400 mm), sväng vänster SNABBT
    if (lastDistance0 >= hinderMin && lastDistance0 <= hinderMax) {
      Serial.println("➡️ Hinder höger! SNABB VÄNSTER.");
      servoPosition = servoLeft;
      myservo.write(servoPosition);
    }

    // ✅ Om hinder till vänster (100–400 mm), sväng höger SNABBT
    if (lastDistance2 >= hinderMin && lastDistance2 <= hinderMax) {
      Serial.println("⬅️ Hinder vänster! SNABB HÖGER.");
      servoPosition = servoRight;
      myservo.write(servoPosition);
    }

    // ✅ Om hinder RAKT FRAM (≤ 100 mm), motor STOPP
    if (lastDistance1 <= hinderMin) {
      Serial.println("🚨 Hinder FRAMFÖR! Motor STOPP!");
      digitalWrite(MOTOR_IN1, LOW);
      digitalWrite(MOTOR_IN2, LOW);
      analogWrite(MOTOR_SPEED, 0);  
    }

    lastDistance0 = distance;

    // ✅ Växla kanal för att mäta nästa område
    if (currentChannel == 0) {
      sensor.setChannel(1);
    } else if (currentChannel == 1) {
      sensor.setChannel(2);
    } else {
      sensor.setChannel(0);
    }

    sensor.startSample();
    delay(300);  // 🔥 Mindre delay för snabbare reaktion
  }
}
